// FlavorFinder.js
import React, { useState, useMemo, useEffect, useRef } from 'react';
import { Search, Sparkles, ChartPieIcon, ChartPie, X, ChevronDown, CircleFadingPlus, RectangleEllipsis, Zap, SendToBack } from 'lucide-react';
import { flavorPairings } from './data/flavorPairings.ts';
import { experimentalPairings } from './data/experimentalPairings.ts';
import { ingredientProfiles } from './data/ingredientProfiles.ts';
import SuggestedIngredients from './components/SuggestedIngredients.tsx';
import CompactTasteSliders from './components/CompactTasteSliders.tsx';
import CategoryFilter from './components/categoryFilter.tsx';
import SortingFilter from './components/SortingFilter.tsx';
import { getCompatibilityScore } from './utils/compatibility.ts';
import IngredientSlot from './components/IngredientSlot.tsx';
import InfoTooltip from './components/InfoTooltip.js';
import TasteAnalysisModal from './components/TasteAnalysisModal.tsx';
import { TASTE_COLORS } from './utils/colors.ts';
import { getSortedCompatibleIngredients, applySortingOption } from './utils/sorting.ts';
import { SearchBar } from './components/SearchBar.tsx';
import { filterIngredients, matchesIngredient } from './utils/searchUtils.ts';

// Main Component
export default function FlavorFinder() {
  const [selectedIngredients, setSelectedIngredients] = useState([]);
  const [isAnalysisModalOpen, setIsAnalysisModalOpen] = useState(false);
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [activeSorting, setActiveSorting] = useState('alphabetical');
  const [isFiltersOpen, setIsFiltersOpen] = useState(false);
  const [showPartialMatches, setShowPartialMatches] = useState(true);
  const [isSearchFocused, setIsSearchFocused] = useState(false);
  const [activeFilters, setActiveFilters] = useState({
    category: '',
    subcategories: []
  });
  const [tasteValues, setTasteValues] = useState({
    sweet: 5,
    salty: 5,
    sour: 5,
    bitter: 5,
    umami: 5,
    fat: 5,
    spicy: 5
  });
  const [activeSliders, setActiveSliders] = useState(new Set());
  const [substitutionMode, setSubstitutionMode] = useState({
    active: false,
    sourceIngredient: null,
    sourceProfile: null,
    slotIndex: null,
    type: 'taste'
  });
  
  const allIngredients = [];
  const filteredIngredients = [];
  const flavorMap = new Map();
  
  const suggestedIngredientsRef = useRef(null);
  
  const handleIngredientSelect = () => {};
  const toggleSlider = () => {};
  const handleModeChange = () => {};
  const handleSubstitute = () => {};
  const handleExitSubstitution = () => {};
  const exitSubstitutionMode = () => {};
  const handleRandomize = () => {};
  
  return (
    <div className="h-screen flex flex-col md:flex-row overflow-hidden relative bg-white text-sm md:text-base">
      {/* Selected Ingredients Column */}
      <div className="flex-1 h-[calc(100vh-56px)] md:h-screen md:w-1/2 flex flex-col order-first md:order-last overflow-hidden pb-0 md:pb-0 divide-y divide-gray-200">
        {/* Ingredient slots would go here */}
      </div>
  
      {/* Search/Filters Column */}
      <div className="w-full h-1/2 md:h-screen md:w-1/2 flex flex-col border-b md:border-b-0 md:border-r border-gray-200 order-last md:order-first overflow-hidden pb-14 md:pb-0">
        {/* Header/Toolbar */}
        <div className="p-2 md:p-4 z-30 bg-white border-t md:border-t-0 md:border-b border-gray-200 flex items-center order-last md:order-first fixed bottom-0 left-0 right-0 md:static">
          <div className="hidden md:flex items-center flex-1">
            <img 
              src="/flavor-finder-1.png" 
              alt="Flavor Finder Logo" 
              className="h-12 w-auto object-contain mr-2"
            />
            <InfoTooltip 
              handleRandomize={handleRandomize}
              handleAnalyze={() => setIsAnalysisModalOpen(true)}
            />
          </div>
          <div className="flex items-center justify-between w-full md:w-auto md:space-x-2">
            <button 
              onClick={() => setIsSearchModalOpen(true)}
              className="md:hidden py-4 px-6 border-2 border-[#72A8D5] rounded-full font-sans flex items-center justify-center transition-colors flex-1 mx-2 text-base"
            >
              <Search size={20} className="mr-2" />
              <span>Search</span>
            </button>
            <button 
              onClick={handleRandomize}
              title="Generate"
              className="py-4 px-6 border-2 border-[#8DC25B] text-[#000000] hover:bg-[#8DC25B] hover:text-white rounded-full font-sans flex items-center justify-center transition-colors flex-1 mx-2 text-base"
            >
              <Sparkles size={20} className="mr-2" />
              <span>Generate</span>
            </button>
          </div>
        </div>
  
        {/* Desktop Search/Filters Content */}
        <div className="hidden md:flex flex-1 flex-col min-h-0">
          {/* Desktop search content would go here */}
        </div>

        {/* Mobile Search Modal */}
        <div className={`
          md:hidden fixed inset-0 z-30 bg-white transition-opacity duration-300
          ${isSearchModalOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}
        `}>
          <div className={`
            fixed inset-0 flex flex-col transform transition-transform duration-300
            ${isSearchModalOpen ? 'translate-y-0' : 'translate-y-full'}
          `}>
            {/* Fixed Header */}
            <div className="flex-none sticky top-0 bg-white z-10 border-b border-gray-200 shadow-sm py-2">
              <div className="flex items-center px-4 pb-2">
                <div className="flex-1">
                  <SearchBar 
                    searchTerm={searchTerm}
                    setSearchTerm={setSearchTerm}
                    ingredients={allIngredients}
                    selectedIngredients={selectedIngredients}
                    onIngredientSelect={handleIngredientSelect}
                    isSearchFocused={isSearchFocused}
                    setIsSearchFocused={setIsSearchFocused}
                    largerMobile={true}
                  />
                </div>
                <button 
                  onClick={() => setIsSearchModalOpen(false)} 
                  className="ml-2 p-2 rounded-full hover:bg-gray-100"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="px-4">
                <button
                  onClick={() => setIsFiltersOpen(!isFiltersOpen)}
                  className="w-full flex items-center justify-between py-2 text-base rounded-lg text-gray-600 hover:text-gray-800"
                >
                  <span className="font-medium">Filters</span>
                  <ChevronDown size={20} className={isFiltersOpen ? 'rotate-180 transform' : ''} />
                </button>
              </div>
            </div>

            {/* Filters */}
            <div className="flex-none overflow-hidden bg-white border-b border-gray-200">
              <div className={`overflow-hidden transition-all duration-200 ${isFiltersOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}>
                <div className="px-4 py-2">
                  <CategoryFilter
                    activeCategory={activeFilters.category}
                    selectedSubcategories={activeFilters.subcategories}
                    onFiltersChange={() => {}}
                    compact={true}
                  />
                  <div className="overflow-x-auto mt-2">
                    <CompactTasteSliders
                      values={tasteValues}
                      onChange={() => {}}
                      activeSliders={activeSliders}
                      onToggleSlider={toggleSlider}
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-auto">
              <div className="h-full pb-16">
                <SuggestedIngredients
                  ref={suggestedIngredientsRef}
                  suggestions={filteredIngredients}
                  onSelect={handleIngredientSelect}
                  selectedIngredients={selectedIngredients}
                  flavorMap={flavorMap}
                  ingredientProfiles={ingredientProfiles}
                  showPartialMatches={showPartialMatches}
                  className="h-full pb-16"
                  sortingOption={activeSorting}
                  substitutionMode={{
                    active: substitutionMode.active,
                    sourceIngredient: substitutionMode.sourceIngredient,
                    type: substitutionMode.type,
                    slotIndex: substitutionMode.slotIndex
                  }}
                  onModeSelect={handleModeChange}
                  onModeToggle={() => {}}
                />
              </div>
            </div>

            {/* Footer */}
            <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg">
              <div className="flex items-center justify-between p-3">
                <SortingFilter
                  activeSorting={activeSorting}
                  onSortingChange={setActiveSorting}
                  compact={true}
                />
                <button
                  onClick={() => setShowPartialMatches(!showPartialMatches)}
                  className="p-2 rounded-full border-2 border-dashed transition-colors flex-shrink-0"
                >
                  <Zap size={20} />
                </button>
              </div>
            </div>
          </div>
        </div>

        <TasteAnalysisModal
          isOpen={isAnalysisModalOpen}
          onClose={() => setIsAnalysisModalOpen(false)}
          selectedIngredients={selectedIngredients}
          ingredientProfiles={ingredientProfiles}
          onIngredientsChange={setSelectedIngredients}
          flavorMap={flavorMap}
        />
      </div>
    </div>
  );
}
